{"version":3,"sources":["components/QuestionCount.js","components/question.js","components/summary.js","components/score.js","components/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["QuestionCount","props","react_default","a","createElement","className","count","total","Question","c","b","Summary","display","map","x","i","Carousel","Item","key","val1","operator","val2","answer","input","correct","wrong","style","backgroundColor","interval","length","Score","Quiz","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeInput","e","setState","target","value","startQuiz","start","generateQuestion","handleInput","_this$state","state","wrong_answers","Number","obj","push","answered","reStartQuiz","maxnum","dropdwn","_this$state2","Math","floor","random","operatorList","round","_this2","_this$state3","Form","Row","Group","as","Col","controlId","Label","Control","id","onChange","type","Button","onClick","variant","components_QuestionCount","question","placeholder","score","summary","Component","App","Container","align","components_Quiz","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d68e4c4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n  function QuestionCount(props) {\r\n    return (\r\n      <div className=\"questionCount\">\r\n        Question <span>{props.count}</span> of <span>{props.total}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default QuestionCount;","import React from 'react';\r\n\r\n function Question(props) {  \r\n    return (\r\n      <h2 className=\"question\">What is {props.a}{props.c}{props.b}=?</h2>\r\n    );\r\n  }\r\n  \r\n \r\n\r\n  export default Question;","import React from 'react';\r\nimport {Carousel } from 'react-bootstrap';\r\n\r\n\r\n  function Summary(props) {\r\n\r\n    const a =  props.display.map((x,i) => {\r\n        return(\r\n             <Carousel.Item key={i}>\r\n                  \r\n                 <div className=\"summary-question\">   \r\n            What is {x.val1}{x.operator}{x.val2}?\r\n            </div>\r\n            <div className=\"summary-correct\"> \r\n            Correct answer : {x.answer}\r\n            </div>\r\n            <div className=\"summary-wrong\"> \r\n            Your answer : {x.input}    \r\n            </div>   \r\n            </Carousel.Item>\r\n            \r\n        )}\r\n        )\r\n    \r\n    return (\r\n      <div className=\"summary\">\r\n        <div className=\"total\">Total Questions : {props.total}</div>\r\n        <div className=\"correct\">Correct Answers : {props.correct}</div>\r\n        <div className=\"wrong\"> Wrong Answers : {props.wrong}</div>\r\n      <hr/>\r\n      Correct Answers\r\n      <div style={{backgroundColor:'black'}}>\r\n      <Carousel interval={null}>\r\n      {props.display.length===0?  <Carousel.Item> No wrong answers!!<br/> Nothing to show. </Carousel.Item> :a}\r\n     </Carousel>\r\n        </div>\r\n\r\n\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Summary;","import React from 'react';\r\n\r\n  function Score(props) {\r\n    return (\r\n      <div className=\"score\">\r\n        Score : {props.c}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Score;","import React, { Component } from 'react';\r\nimport QuestionCount from './QuestionCount';\r\nimport Question from './question';\r\nimport Summary from './summary';\r\nimport Score from './score';\r\nimport {Form,Col,Button } from 'react-bootstrap';\r\n\r\n\r\nclass Quiz extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            input : '',\r\n            count : {\r\n                answered : 0,\r\n                correct : 0,\r\n                wrong : 0\r\n            },\r\n            val1 : 0,\r\n            val2 : 0,\r\n            answer : 0,\r\n            total :20,\r\n            \r\n            operator : '',\r\n            start : false,\r\n            wrong_answers :[],\r\n           \r\n            maxnum : 10, \r\n            dropdwn : 'All'\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    changeInput = (e)=>{\r\n        this.setState({input:e.target.value})\r\n    }\r\n\r\n    startQuiz=()=>{\r\n        this.setState({start:true})\r\n        this.generateQuestion();\r\n        }\r\n\r\n    handleInput = (e)=> {\r\n        var {count,wrong_answers} = this.state;\r\n        \r\n\r\n\r\n        if(Number(this.state.input) === Number(this.state.answer))\r\n          {\r\n              count.correct++;\r\n          }\r\n          else{\r\n              count.wrong++;\r\n              var obj ={\r\n                val1 : this.state.val1,\r\n                val2 : this.state.val2,\r\n                answer : this.state.answer,\r\n                operator : this.state.operator,\r\n                input : this.state.input\r\n              }\r\n              wrong_answers.push(obj);\r\n\r\n          }\r\n          count.answered ++;\r\n          this.setState({count,input:''});\r\n          this.generateQuestion();\r\n    }\r\n\r\n    reStartQuiz = ()=>{\r\n        this.setState({\r\n            input : '',\r\n            count : {\r\n                answered : 0,\r\n                correct : 0,\r\n                wrong : 0\r\n            },\r\n            val1 : 0,\r\n            val2 : 0,\r\n            answer : 0,\r\n            total :20,\r\n            \r\n            operator : '',\r\n            start : false,\r\n            wrong_answers :[],\r\n           \r\n            maxnum : 10, \r\n            dropdwn : 'All'\r\n                  \r\n        })\r\n    }\r\n\r\n    generateQuestion = () =>{\r\n       var {val1, val2, operator, answer,maxnum,dropdwn} = this.state;\r\n       val1 = Math.floor(Math.random()*maxnum+1);\r\n       val2 = Math.floor(Math.random()*maxnum+1);\r\n       var operatorList=[];\r\n       if(dropdwn==='All')\r\n        operatorList = ['/', '-', '*', '+'];\r\n        else \r\n        operatorList =[dropdwn];\r\n        operator =  operatorList[Math.floor(Math.random()*operatorList.length)];\r\n\r\n         switch(operator){\r\n\r\n             case '+':\r\n             answer = val1+val2;\r\n             break;\r\n\r\n             case '-':\r\n             answer = val1-val2;\r\n             break;\r\n\r\n             case '/':\r\n             answer = val1/val2;\r\n             if(answer%1!==0)\r\n             answer = Math.round(answer * 100) / 100;\r\n             break;\r\n\r\n             case '*':\r\n             answer = val1*val2;\r\n             break;\r\n\r\n             default:\r\n             break;\r\n         }\r\n\r\n         this.setState({val1,val2,answer,operator})\r\n    }\r\n  \r\n    render(){\r\n        const {input,count,val1,val2,total,operator,start,wrong_answers} = this.state;\r\n\r\n\r\n        \r\n         const a = () =>{\r\n             return(\r\n                <div>\r\n                    <div className=\"counter\">\r\n                <QuestionCount count={this.state.count.answered+1} total={this.state.total}/>\r\n                </div>\r\n                <div className=\"question\">\r\n                <Question a={val1} b={val2} c={operator}/>\r\n                </div>\r\n                <div className=\"input\">\r\n                <input placeholder=\"Your answer...\" type=\"number\" value={this.state.input} onChange={this.changeInput} />\r\n                <div className=\"note\">Note : Round off to 2 decimal places in case of fraction.</div>\r\n                 </div>\r\n                     \r\n                 <input className=\"next\" type=\"button\" value=\"Next\" onClick={this.handleInput}/>\r\n\r\n                 <Score c={count.correct}/>\r\n             </div>\r\n             )\r\n         }\r\n\r\n         const b = ()=> {\r\n            return (\r\n                <div className=\"summary\">\r\n                  Quiz Over!!!<br/>\r\n                  <input className=\"retry\" type=\"button\" value=\"Retry\" onClick={this.reStartQuiz}/>\r\n                  <Summary correct={count.correct} wrong={count.wrong} display={wrong_answers} total={total}/>\r\n                </div>\r\n            )\r\n         }\r\n        \r\n         const c = () => {\r\n             return (\r\n                 <div>                \r\n                     <Form>\r\n  \r\n\r\n \r\n\r\n  <Form.Row>\r\n    <Form.Group as={Col} controlId=\"formNum\">\r\n      <Form.Label>Number Of questions</Form.Label>\r\n      <Form.Control id=\"total\" value={total} onChange={(e)=>this.setState({total:e.target.value})} type=\"number\" />\r\n    </Form.Group>\r\n    </Form.Row>\r\n\r\n    <Form.Row>\r\n\r\n    <Form.Group as={Col} controlId=\"formOperation\">\r\n      <Form.Label>Question Type:</Form.Label>\r\n      <Form.Control value={this.state.dropdwn} \r\n        onChange={(e)=>{this.setState({dropdwn: e.target.value})}}  as=\"select\">\r\n        <option value='All'>Mixed</option>\r\n        <option value='+'>Addition</option>\r\n        <option value='-'>Subtraction</option>\r\n        <option value='/'>Division</option>\r\n        <option value='*'>Multiplication</option>\r\n      </Form.Control>\r\n    </Form.Group>\r\n    </Form.Row>\r\n\r\n    <Form.Row>\r\n\r\n    <Form.Group as={Col} controlId=\"formRange\">\r\n      <Form.Label>Maximum number allowed:</Form.Label>\r\n      <Form.Control value={this.state.maxnum} onChange={(e)=>this.setState({maxnum:e.target.value})} type=\"number\" />\r\n\r\n    </Form.Group>\r\n  </Form.Row>\r\n\r\n  <Button id=\"start\" onClick={this.startQuiz} variant=\"primary\" type=\"submit\">\r\n    Start Quiz\r\n  </Button>\r\n</Form>\r\n                     \r\n                 </div>\r\n             )\r\n         }\r\n        return(\r\n           \r\n            <div>{start===false? c() :count.answered < total ? a() : b()}</div>\r\n           \r\n        ) } \r\n        \r\n        \r\n}\r\n\r\nexport default Quiz;\r\n","import React, { Component } from 'react';\nimport Quiz from './components/Quiz'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n  <Container>\n  <Row>\n    <Col>\n    <div align=\"center\" className=\"title\">Quiz 1</div>\n    <div align=\"center\"  className=\"quiz\">\n    <Quiz/>\n    </div>\n    </Col>\n    <Col>\n    <div align=\"center\" className=\"title\">Quiz 2</div>\n    <div  align=\"center\" className=\"quiz\">\n    <Quiz/>\n    </div>\n    </Col>\n  </Row>\n  <div className=\"vl\"></div> \n  </Container>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}